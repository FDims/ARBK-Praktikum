
Praktikum3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000188  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  00800100  00800100  000001fc  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000001fc  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000022c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000048  00000000  00000000  0000026c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000007ad  00000000  00000000  000002b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006c1  00000000  00000000  00000a61  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000002a6  00000000  00000000  00001122  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000a0  00000000  00000000  000013c8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000392  00000000  00000000  00001468  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000092  00000000  00000000  000017fa  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000038  00000000  00000000  0000188c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 57 00 	jmp	0xae	; 0xae <__vector_14>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a4 30       	cpi	r26, 0x04	; 4
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 ac 00 	call	0x158	; 0x158 <main>
  88:	0c 94 c2 00 	jmp	0x184	; 0x184 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <TC0_setUp>:
#define LED PIND0

volatile uint32_t systemClock = 0;

void TC0_setUp() {							//Timer 0 verwenden
	TCCR0A = (1 << WGM01);					// enable CTC mode of Timer/Counter 0 Control Register A
  90:	92 e0       	ldi	r25, 0x02	; 2
  92:	94 bd       	out	0x24, r25	; 36
	TCCR0B |= (1 << CS01) | (1 << CS00);	// set Prescaler 64
  94:	85 b5       	in	r24, 0x25	; 37
  96:	83 60       	ori	r24, 0x03	; 3
  98:	85 bd       	out	0x25, r24	; 37
											// Prescaler = (16000000Hz . 0,001s)/2^8 = 62,5
											//closest factor = 64
											
	OCR0A = 249;							// set up Output Comparison Register A for Timer0 to generate an interrupt when timer counter and OCR0A are equals
  9a:	89 ef       	ldi	r24, 0xF9	; 249
  9c:	87 bd       	out	0x27, r24	; 39
											// OCR = F_clk / (F_TimerInterrupt x prescaler) - 1 = ( 16MHz/(1000Hz x 64) ) - 1 = 249
	TIMSK0 = (1 << OCIE0A);					// enable interrupt
  9e:	90 93 6e 00 	sts	0x006E, r25	; 0x80006e <__TEXT_REGION_LENGTH__+0x7e006e>
  a2:	08 95       	ret

000000a4 <dir_setUp>:
}
void dir_setUp(){
	DDRD = 0xff;							// Data direction register D (D0) as output
  a4:	8f ef       	ldi	r24, 0xFF	; 255
  a6:	8a b9       	out	0x0a, r24	; 10
	PORTD = 0x00;
  a8:	1b b8       	out	0x0b, r1	; 11
	sei();									// set global interrupt enable
  aa:	78 94       	sei
  ac:	08 95       	ret

000000ae <__vector_14>:
}

ISR(TIMER0_COMPA_vect) {
  ae:	1f 92       	push	r1
  b0:	0f 92       	push	r0
  b2:	0f b6       	in	r0, 0x3f	; 63
  b4:	0f 92       	push	r0
  b6:	11 24       	eor	r1, r1
  b8:	8f 93       	push	r24
  ba:	9f 93       	push	r25
  bc:	af 93       	push	r26
  be:	bf 93       	push	r27
	systemClock++;
  c0:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
  c4:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
  c8:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <_edata+0x2>
  cc:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <_edata+0x3>
  d0:	01 96       	adiw	r24, 0x01	; 1
  d2:	a1 1d       	adc	r26, r1
  d4:	b1 1d       	adc	r27, r1
  d6:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
  da:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
  de:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <_edata+0x2>
  e2:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <_edata+0x3>
}
  e6:	bf 91       	pop	r27
  e8:	af 91       	pop	r26
  ea:	9f 91       	pop	r25
  ec:	8f 91       	pop	r24
  ee:	0f 90       	pop	r0
  f0:	0f be       	out	0x3f, r0	; 63
  f2:	0f 90       	pop	r0
  f4:	1f 90       	pop	r1
  f6:	18 95       	reti

000000f8 <waitFor>:

void waitFor(uint32_t ms) {
  f8:	0f 93       	push	r16
  fa:	1f 93       	push	r17
	uint32_t currentTime = systemClock + ms;
  fc:	00 91 00 01 	lds	r16, 0x0100	; 0x800100 <_edata>
 100:	10 91 01 01 	lds	r17, 0x0101	; 0x800101 <_edata+0x1>
 104:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <_edata+0x2>
 108:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <_edata+0x3>
 10c:	ab 01       	movw	r20, r22
 10e:	bc 01       	movw	r22, r24
 110:	40 0f       	add	r20, r16
 112:	51 1f       	adc	r21, r17
 114:	62 1f       	adc	r22, r18
 116:	73 1f       	adc	r23, r19
	while (systemClock < currentTime) {}
 118:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 11c:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 120:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <_edata+0x2>
 124:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <_edata+0x3>
 128:	84 17       	cp	r24, r20
 12a:	95 07       	cpc	r25, r21
 12c:	a6 07       	cpc	r26, r22
 12e:	b7 07       	cpc	r27, r23
 130:	98 f3       	brcs	.-26     	; 0x118 <waitFor+0x20>
}
 132:	1f 91       	pop	r17
 134:	0f 91       	pop	r16
 136:	08 95       	ret

00000138 <waitUntil>:

void waitUntil(uint32_t ms) {
 138:	ab 01       	movw	r20, r22
 13a:	bc 01       	movw	r22, r24
	while (systemClock <= ms) {}
 13c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 140:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 144:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <_edata+0x2>
 148:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <_edata+0x3>
 14c:	48 17       	cp	r20, r24
 14e:	59 07       	cpc	r21, r25
 150:	6a 07       	cpc	r22, r26
 152:	7b 07       	cpc	r23, r27
 154:	98 f7       	brcc	.-26     	; 0x13c <waitUntil+0x4>
}
 156:	08 95       	ret

00000158 <main>:

int main(void)
{
	/* Replace with your application code */
	
	dir_setUp();
 158:	0e 94 52 00 	call	0xa4	; 0xa4 <dir_setUp>
	TC0_setUp();
 15c:	0e 94 48 00 	call	0x90	; 0x90 <TC0_setUp>

	
	waitUntil(3000);						// wait until 3s from the beginning then turn on LED
 160:	68 eb       	ldi	r22, 0xB8	; 184
 162:	7b e0       	ldi	r23, 0x0B	; 11
 164:	80 e0       	ldi	r24, 0x00	; 0
 166:	90 e0       	ldi	r25, 0x00	; 0
 168:	0e 94 9c 00 	call	0x138	; 0x138 <waitUntil>
	PORTD = 1;					// setting bit for LED
 16c:	81 e0       	ldi	r24, 0x01	; 1
 16e:	8b b9       	out	0x0b, r24	; 11
	while (1)
	{
		waitFor(1000);						// wait for 1s then toggle LED on/off
 170:	68 ee       	ldi	r22, 0xE8	; 232
 172:	73 e0       	ldi	r23, 0x03	; 3
 174:	80 e0       	ldi	r24, 0x00	; 0
 176:	90 e0       	ldi	r25, 0x00	; 0
 178:	0e 94 7c 00 	call	0xf8	; 0xf8 <waitFor>
		PORTD += 1;				// toggling LED
 17c:	8b b1       	in	r24, 0x0b	; 11
 17e:	8f 5f       	subi	r24, 0xFF	; 255
 180:	8b b9       	out	0x0b, r24	; 11
 182:	f6 cf       	rjmp	.-20     	; 0x170 <main+0x18>

00000184 <_exit>:
 184:	f8 94       	cli

00000186 <__stop_program>:
 186:	ff cf       	rjmp	.-2      	; 0x186 <__stop_program>
