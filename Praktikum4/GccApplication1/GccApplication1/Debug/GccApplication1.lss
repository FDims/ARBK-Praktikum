
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000014  00800100  00000280  00000314  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000280  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  00800114  00800114  00000328  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000328  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000358  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000070  00000000  00000000  00000398  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000093f  00000000  00000000  00000408  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007ee  00000000  00000000  00000d47  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000045e  00000000  00000000  00001535  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000ac  00000000  00000000  00001994  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003e7  00000000  00000000  00001a40  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000010d  00000000  00000000  00001e27  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000040  00000000  00000000  00001f34  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__vector_3>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e0 e8       	ldi	r30, 0x80	; 128
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a4 31       	cpi	r26, 0x14	; 20
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a4 e1       	ldi	r26, 0x14	; 20
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a8 31       	cpi	r26, 0x18	; 24
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <main>
  9e:	0c 94 3e 01 	jmp	0x27c	; 0x27c <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <init>:
 */ 

#include "keys.h"

void init(){
	cli();
  a6:	f8 94       	cli
	PCICR = (1<<PCIE0);
  a8:	81 e0       	ldi	r24, 0x01	; 1
  aa:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <__TEXT_REGION_LENGTH__+0x7e0068>
	PCMSK0=(1<<PINB1)|(1<<PINB2);
  ae:	86 e0       	ldi	r24, 0x06	; 6
  b0:	80 93 6b 00 	sts	0x006B, r24	; 0x80006b <__TEXT_REGION_LENGTH__+0x7e006b>
	sei();
  b4:	78 94       	sei
  b6:	08 95       	ret

000000b8 <out>:
 * Matrikel-Nr : 3503937
 */ 
#include "sevenseg.h"

void out(int count, int convert[]){
	PORTD = convert[count];
  b8:	88 0f       	add	r24, r24
  ba:	99 1f       	adc	r25, r25
  bc:	fb 01       	movw	r30, r22
  be:	e8 0f       	add	r30, r24
  c0:	f9 1f       	adc	r31, r25
  c2:	80 81       	ld	r24, Z
  c4:	8b b9       	out	0x0b, r24	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  c6:	8f e3       	ldi	r24, 0x3F	; 63
  c8:	9c e9       	ldi	r25, 0x9C	; 156
  ca:	01 97       	sbiw	r24, 0x01	; 1
  cc:	f1 f7       	brne	.-4      	; 0xca <out+0x12>
  ce:	00 c0       	rjmp	.+0      	; 0xd0 <out+0x18>
  d0:	00 00       	nop
	_delay_ms(10);
	PORTB ^=(1<<PINB0);
  d2:	95 b1       	in	r25, 0x05	; 5
  d4:	81 e0       	ldi	r24, 0x01	; 1
  d6:	89 27       	eor	r24, r25
  d8:	85 b9       	out	0x05, r24	; 5
  da:	08 95       	ret

000000dc <__vector_3>:
*/

volatile uint32_t count = 0;
int convert[10] ={ 64, 121, 36, 48, 25, 18, 2, 120, 0, 16};

ISR(PCINT0_vect){
  dc:	1f 92       	push	r1
  de:	0f 92       	push	r0
  e0:	0f b6       	in	r0, 0x3f	; 63
  e2:	0f 92       	push	r0
  e4:	11 24       	eor	r1, r1
  e6:	8f 93       	push	r24
  e8:	9f 93       	push	r25
  ea:	af 93       	push	r26
  ec:	bf 93       	push	r27
	if(!(PINB & (1<<PINB1))){
  ee:	19 99       	sbic	0x03, 1	; 3
  f0:	29 c0       	rjmp	.+82     	; 0x144 <__vector_3+0x68>
		if(count == 99){
  f2:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <__data_end>
  f6:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <__data_end+0x1>
  fa:	a0 91 16 01 	lds	r26, 0x0116	; 0x800116 <__data_end+0x2>
  fe:	b0 91 17 01 	lds	r27, 0x0117	; 0x800117 <__data_end+0x3>
 102:	83 36       	cpi	r24, 0x63	; 99
 104:	91 05       	cpc	r25, r1
 106:	a1 05       	cpc	r26, r1
 108:	b1 05       	cpc	r27, r1
 10a:	49 f4       	brne	.+18     	; 0x11e <__vector_3+0x42>
			count =0;
 10c:	10 92 14 01 	sts	0x0114, r1	; 0x800114 <__data_end>
 110:	10 92 15 01 	sts	0x0115, r1	; 0x800115 <__data_end+0x1>
 114:	10 92 16 01 	sts	0x0116, r1	; 0x800116 <__data_end+0x2>
 118:	10 92 17 01 	sts	0x0117, r1	; 0x800117 <__data_end+0x3>
 11c:	13 c0       	rjmp	.+38     	; 0x144 <__vector_3+0x68>
		}else{
			count++;
 11e:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <__data_end>
 122:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <__data_end+0x1>
 126:	a0 91 16 01 	lds	r26, 0x0116	; 0x800116 <__data_end+0x2>
 12a:	b0 91 17 01 	lds	r27, 0x0117	; 0x800117 <__data_end+0x3>
 12e:	01 96       	adiw	r24, 0x01	; 1
 130:	a1 1d       	adc	r26, r1
 132:	b1 1d       	adc	r27, r1
 134:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <__data_end>
 138:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <__data_end+0x1>
 13c:	a0 93 16 01 	sts	0x0116, r26	; 0x800116 <__data_end+0x2>
 140:	b0 93 17 01 	sts	0x0117, r27	; 0x800117 <__data_end+0x3>
		}
	}
	if(!(PINB & (1<<PINB2))){
 144:	1a 99       	sbic	0x03, 2	; 3
 146:	2c c0       	rjmp	.+88     	; 0x1a0 <__vector_3+0xc4>
		if(count == 0){
 148:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <__data_end>
 14c:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <__data_end+0x1>
 150:	a0 91 16 01 	lds	r26, 0x0116	; 0x800116 <__data_end+0x2>
 154:	b0 91 17 01 	lds	r27, 0x0117	; 0x800117 <__data_end+0x3>
 158:	89 2b       	or	r24, r25
 15a:	8a 2b       	or	r24, r26
 15c:	8b 2b       	or	r24, r27
 15e:	69 f4       	brne	.+26     	; 0x17a <__vector_3+0x9e>
			count =99;
 160:	83 e6       	ldi	r24, 0x63	; 99
 162:	90 e0       	ldi	r25, 0x00	; 0
 164:	a0 e0       	ldi	r26, 0x00	; 0
 166:	b0 e0       	ldi	r27, 0x00	; 0
 168:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <__data_end>
 16c:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <__data_end+0x1>
 170:	a0 93 16 01 	sts	0x0116, r26	; 0x800116 <__data_end+0x2>
 174:	b0 93 17 01 	sts	0x0117, r27	; 0x800117 <__data_end+0x3>
 178:	13 c0       	rjmp	.+38     	; 0x1a0 <__vector_3+0xc4>
		}else{
			count--;
 17a:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <__data_end>
 17e:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <__data_end+0x1>
 182:	a0 91 16 01 	lds	r26, 0x0116	; 0x800116 <__data_end+0x2>
 186:	b0 91 17 01 	lds	r27, 0x0117	; 0x800117 <__data_end+0x3>
 18a:	01 97       	sbiw	r24, 0x01	; 1
 18c:	a1 09       	sbc	r26, r1
 18e:	b1 09       	sbc	r27, r1
 190:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <__data_end>
 194:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <__data_end+0x1>
 198:	a0 93 16 01 	sts	0x0116, r26	; 0x800116 <__data_end+0x2>
 19c:	b0 93 17 01 	sts	0x0117, r27	; 0x800117 <__data_end+0x3>
		}
	}
}
 1a0:	bf 91       	pop	r27
 1a2:	af 91       	pop	r26
 1a4:	9f 91       	pop	r25
 1a6:	8f 91       	pop	r24
 1a8:	0f 90       	pop	r0
 1aa:	0f be       	out	0x3f, r0	; 63
 1ac:	0f 90       	pop	r0
 1ae:	1f 90       	pop	r1
 1b0:	18 95       	reti

000001b2 <setup>:
void setup(){
	DDRD=0xff;
 1b2:	8f ef       	ldi	r24, 0xFF	; 255
 1b4:	8a b9       	out	0x0a, r24	; 10
	PORTD=1<<PIND6;
 1b6:	80 e4       	ldi	r24, 0x40	; 64
 1b8:	8b b9       	out	0x0b, r24	; 11
	
	DDRB = 0x01;
 1ba:	81 e0       	ldi	r24, 0x01	; 1
 1bc:	84 b9       	out	0x04, r24	; 4
	PORTB = (1<<PINB1)|(1<<PINB2);
 1be:	86 e0       	ldi	r24, 0x06	; 6
 1c0:	85 b9       	out	0x05, r24	; 5
 1c2:	08 95       	ret

000001c4 <main>:
}
int main(void)
{
    setup();
 1c4:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <setup>
	init();
 1c8:	0e 94 53 00 	call	0xa6	; 0xa6 <init>
    while (1) 
    {
		int ones = count%10;
 1cc:	0f 2e       	mov	r0, r31
 1ce:	fa e0       	ldi	r31, 0x0A	; 10
 1d0:	4f 2e       	mov	r4, r31
 1d2:	51 2c       	mov	r5, r1
 1d4:	61 2c       	mov	r6, r1
 1d6:	71 2c       	mov	r7, r1
 1d8:	f0 2d       	mov	r31, r0
 1da:	60 91 14 01 	lds	r22, 0x0114	; 0x800114 <__data_end>
 1de:	70 91 15 01 	lds	r23, 0x0115	; 0x800115 <__data_end+0x1>
 1e2:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <__data_end+0x2>
 1e6:	90 91 17 01 	lds	r25, 0x0117	; 0x800117 <__data_end+0x3>
 1ea:	a3 01       	movw	r20, r6
 1ec:	92 01       	movw	r18, r4
 1ee:	0e 94 1c 01 	call	0x238	; 0x238 <__udivmodsi4>
 1f2:	6b 01       	movw	r12, r22
 1f4:	7c 01       	movw	r14, r24
		int tens = (count-ones)/10;
 1f6:	80 90 14 01 	lds	r8, 0x0114	; 0x800114 <__data_end>
 1fa:	90 90 15 01 	lds	r9, 0x0115	; 0x800115 <__data_end+0x1>
 1fe:	a0 90 16 01 	lds	r10, 0x0116	; 0x800116 <__data_end+0x2>
 202:	b0 90 17 01 	lds	r11, 0x0117	; 0x800117 <__data_end+0x3>
		
		out(ones,convert);
 206:	60 e0       	ldi	r22, 0x00	; 0
 208:	71 e0       	ldi	r23, 0x01	; 1
 20a:	c6 01       	movw	r24, r12
 20c:	0e 94 5c 00 	call	0xb8	; 0xb8 <out>
		out(tens,convert);
 210:	0d 2c       	mov	r0, r13
 212:	00 0c       	add	r0, r0
 214:	ee 08       	sbc	r14, r14
 216:	ff 08       	sbc	r15, r15
 218:	c5 01       	movw	r24, r10
 21a:	b4 01       	movw	r22, r8
 21c:	6c 19       	sub	r22, r12
 21e:	7d 09       	sbc	r23, r13
 220:	8e 09       	sbc	r24, r14
 222:	9f 09       	sbc	r25, r15
 224:	a3 01       	movw	r20, r6
 226:	92 01       	movw	r18, r4
 228:	0e 94 1c 01 	call	0x238	; 0x238 <__udivmodsi4>
 22c:	60 e0       	ldi	r22, 0x00	; 0
 22e:	71 e0       	ldi	r23, 0x01	; 1
 230:	c9 01       	movw	r24, r18
 232:	0e 94 5c 00 	call	0xb8	; 0xb8 <out>
 236:	d1 cf       	rjmp	.-94     	; 0x1da <main+0x16>

00000238 <__udivmodsi4>:
 238:	a1 e2       	ldi	r26, 0x21	; 33
 23a:	1a 2e       	mov	r1, r26
 23c:	aa 1b       	sub	r26, r26
 23e:	bb 1b       	sub	r27, r27
 240:	fd 01       	movw	r30, r26
 242:	0d c0       	rjmp	.+26     	; 0x25e <__udivmodsi4_ep>

00000244 <__udivmodsi4_loop>:
 244:	aa 1f       	adc	r26, r26
 246:	bb 1f       	adc	r27, r27
 248:	ee 1f       	adc	r30, r30
 24a:	ff 1f       	adc	r31, r31
 24c:	a2 17       	cp	r26, r18
 24e:	b3 07       	cpc	r27, r19
 250:	e4 07       	cpc	r30, r20
 252:	f5 07       	cpc	r31, r21
 254:	20 f0       	brcs	.+8      	; 0x25e <__udivmodsi4_ep>
 256:	a2 1b       	sub	r26, r18
 258:	b3 0b       	sbc	r27, r19
 25a:	e4 0b       	sbc	r30, r20
 25c:	f5 0b       	sbc	r31, r21

0000025e <__udivmodsi4_ep>:
 25e:	66 1f       	adc	r22, r22
 260:	77 1f       	adc	r23, r23
 262:	88 1f       	adc	r24, r24
 264:	99 1f       	adc	r25, r25
 266:	1a 94       	dec	r1
 268:	69 f7       	brne	.-38     	; 0x244 <__udivmodsi4_loop>
 26a:	60 95       	com	r22
 26c:	70 95       	com	r23
 26e:	80 95       	com	r24
 270:	90 95       	com	r25
 272:	9b 01       	movw	r18, r22
 274:	ac 01       	movw	r20, r24
 276:	bd 01       	movw	r22, r26
 278:	cf 01       	movw	r24, r30
 27a:	08 95       	ret

0000027c <_exit>:
 27c:	f8 94       	cli

0000027e <__stop_program>:
 27e:	ff cf       	rjmp	.-2      	; 0x27e <__stop_program>
