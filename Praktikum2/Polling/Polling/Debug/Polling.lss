
Polling.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  000001c6  0000025a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001c6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  00800102  00800102  0000025c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000025c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000028c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000028  00000000  00000000  000002cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000075f  00000000  00000000  000002f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006b5  00000000  00000000  00000a53  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000002e3  00000000  00000000  00001108  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000034  00000000  00000000  000013ec  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000394  00000000  00000000  00001420  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  000017b4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e6 ec       	ldi	r30, 0xC6	; 198
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 30       	cpi	r26, 0x02	; 2
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a2 e0       	ldi	r26, 0x02	; 2
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a6 30       	cpi	r26, 0x06	; 6
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 59 00 	call	0xb2	; 0xb2 <main>
  9e:	0c 94 e1 00 	jmp	0x1c2	; 0x1c2 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <setupPort>:
volatile int on = PINB1;
volatile int off = PINB0;
volatile int blink = 0;

void setupPort(){
	DDRD=0x00;					//PORTD als input PD2 zu SW1 und PD3 zu SW2
  a6:	1a b8       	out	0x0a, r1	; 10
	PORTD=0xff;
  a8:	8f ef       	ldi	r24, 0xFF	; 255
  aa:	8b b9       	out	0x0b, r24	; 11
	
	DDRB=0xff;					//PORTB als output PB0 zu D0 unf PB1 zu D9
  ac:	84 b9       	out	0x04, r24	; 4
	PORTB=0x00;
  ae:	15 b8       	out	0x05, r1	; 5
  b0:	08 95       	ret

000000b2 <main>:
}
int main(void)
{
	setupPort();
  b2:	0e 94 53 00 	call	0xa6	; 0xa6 <setupPort>
				blink^=(1<<0);
			}else{
				PINB= (1<<PINB0);
			}
			on = PINB0;
			off = PINB1;
  b6:	21 e0       	ldi	r18, 0x01	; 1
  b8:	30 e0       	ldi	r19, 0x00	; 0
    {
		if( !( PIND & (1<<PIND2) ) ){			//SW0 gedrückt 
			if(on==PINB0){
				blink^=(1<<0);
			}else{
				PINB= (1<<PINB0);
  ba:	61 e0       	ldi	r22, 0x01	; 1
		
		if( !( PIND & (1<<PIND3) ) ){			//SW1 gedrückt 
			if(on==PINB1){
				blink^=(1<<0);
			}else{
				PINB= (1<<PINB1);
  bc:	52 e0       	ldi	r21, 0x02	; 2
	setupPort();
	
	
    while (1) 
    {
		if( !( PIND & (1<<PIND2) ) ){			//SW0 gedrückt 
  be:	4a 99       	sbic	0x09, 2	; 9
  c0:	1a c0       	rjmp	.+52     	; 0xf6 <main+0x44>
			if(on==PINB0){
  c2:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
  c6:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
  ca:	89 2b       	or	r24, r25
  cc:	59 f4       	brne	.+22     	; 0xe4 <main+0x32>
				blink^=(1<<0);
  ce:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_end>
  d2:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__data_end+0x1>
  d6:	41 e0       	ldi	r20, 0x01	; 1
  d8:	84 27       	eor	r24, r20
  da:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <__data_end+0x1>
  de:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_end>
  e2:	01 c0       	rjmp	.+2      	; 0xe6 <main+0x34>
			}else{
				PINB= (1<<PINB0);
  e4:	63 b9       	out	0x03, r22	; 3
			}
			on = PINB0;
  e6:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <__data_start+0x1>
  ea:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__data_start>
			off = PINB1;
  ee:	30 93 05 01 	sts	0x0105, r19	; 0x800105 <off+0x1>
  f2:	20 93 04 01 	sts	0x0104, r18	; 0x800104 <off>
			
		}
		
		if( !( PIND & (1<<PIND3) ) ){			//SW1 gedrückt 
  f6:	4b 99       	sbic	0x09, 3	; 9
  f8:	1a c0       	rjmp	.+52     	; 0x12e <main+0x7c>
			if(on==PINB1){
  fa:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
  fe:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 102:	01 97       	sbiw	r24, 0x01	; 1
 104:	59 f4       	brne	.+22     	; 0x11c <main+0x6a>
				blink^=(1<<0);
 106:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_end>
 10a:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__data_end+0x1>
 10e:	e1 e0       	ldi	r30, 0x01	; 1
 110:	8e 27       	eor	r24, r30
 112:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <__data_end+0x1>
 116:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_end>
 11a:	01 c0       	rjmp	.+2      	; 0x11e <main+0x6c>
			}else{
				PINB= (1<<PINB1);
 11c:	53 b9       	out	0x03, r21	; 3
			}
			on = PINB1;
 11e:	30 93 01 01 	sts	0x0101, r19	; 0x800101 <__data_start+0x1>
 122:	20 93 00 01 	sts	0x0100, r18	; 0x800100 <__data_start>
			off = PINB0;
 126:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <off+0x1>
 12a:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <off>
		}
		
		
		if(blink==1){
 12e:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_end>
 132:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__data_end+0x1>
 136:	01 97       	sbiw	r24, 0x01	; 1
 138:	f9 f4       	brne	.+62     	; 0x178 <main+0xc6>
			PORTB &= ~(1 << off);			//LED ausschalten 
 13a:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <off>
 13e:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <off+0x1>
 142:	45 b1       	in	r20, 0x05	; 5
 144:	f9 01       	movw	r30, r18
 146:	02 c0       	rjmp	.+4      	; 0x14c <main+0x9a>
 148:	ee 0f       	add	r30, r30
 14a:	ff 1f       	adc	r31, r31
 14c:	8a 95       	dec	r24
 14e:	e2 f7       	brpl	.-8      	; 0x148 <main+0x96>
 150:	cf 01       	movw	r24, r30
 152:	80 95       	com	r24
 154:	90 95       	com	r25
 156:	84 23       	and	r24, r20
 158:	85 b9       	out	0x05, r24	; 5
			PORTB ^=(1<<on);				//LED blinkt
 15a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 15e:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 162:	45 b1       	in	r20, 0x05	; 5
 164:	f9 01       	movw	r30, r18
 166:	02 c0       	rjmp	.+4      	; 0x16c <main+0xba>
 168:	ee 0f       	add	r30, r30
 16a:	ff 1f       	adc	r31, r31
 16c:	8a 95       	dec	r24
 16e:	e2 f7       	brpl	.-8      	; 0x168 <main+0xb6>
 170:	cf 01       	movw	r24, r30
 172:	84 27       	eor	r24, r20
 174:	85 b9       	out	0x05, r24	; 5
 176:	1b c0       	rjmp	.+54     	; 0x1ae <main+0xfc>
			
		}else{
			PORTB &= ~(1 << off);			//LED ausschalten 
 178:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <off>
 17c:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <off+0x1>
 180:	45 b1       	in	r20, 0x05	; 5
 182:	f9 01       	movw	r30, r18
 184:	02 c0       	rjmp	.+4      	; 0x18a <main+0xd8>
 186:	ee 0f       	add	r30, r30
 188:	ff 1f       	adc	r31, r31
 18a:	8a 95       	dec	r24
 18c:	e2 f7       	brpl	.-8      	; 0x186 <main+0xd4>
 18e:	cf 01       	movw	r24, r30
 190:	80 95       	com	r24
 192:	90 95       	com	r25
 194:	84 23       	and	r24, r20
 196:	85 b9       	out	0x05, r24	; 5
			PORTB = (1<<on);				//LED einschalten
 198:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 19c:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 1a0:	f9 01       	movw	r30, r18
 1a2:	02 c0       	rjmp	.+4      	; 0x1a8 <main+0xf6>
 1a4:	ee 0f       	add	r30, r30
 1a6:	ff 1f       	adc	r31, r31
 1a8:	8a 95       	dec	r24
 1aa:	e2 f7       	brpl	.-8      	; 0x1a4 <main+0xf2>
 1ac:	e5 b9       	out	0x05, r30	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1ae:	ff ef       	ldi	r31, 0xFF	; 255
 1b0:	43 ec       	ldi	r20, 0xC3	; 195
 1b2:	89 e0       	ldi	r24, 0x09	; 9
 1b4:	f1 50       	subi	r31, 0x01	; 1
 1b6:	40 40       	sbci	r20, 0x00	; 0
 1b8:	80 40       	sbci	r24, 0x00	; 0
 1ba:	e1 f7       	brne	.-8      	; 0x1b4 <main+0x102>
 1bc:	00 c0       	rjmp	.+0      	; 0x1be <main+0x10c>
 1be:	00 00       	nop
 1c0:	7e cf       	rjmp	.-260    	; 0xbe <main+0xc>

000001c2 <_exit>:
 1c2:	f8 94       	cli

000001c4 <__stop_program>:
 1c4:	ff cf       	rjmp	.-2      	; 0x1c4 <__stop_program>
