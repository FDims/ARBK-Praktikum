
Fachrial D P Perdana_3503937_ARBKVS_Praktikum2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000238  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001c4  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  00800100  00800100  00000238  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000238  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000268  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000038  00000000  00000000  000002a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000779  00000000  00000000  000002e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006cd  00000000  00000000  00000a59  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000030f  00000000  00000000  00001126  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000007c  00000000  00000000  00001438  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003f4  00000000  00000000  000014b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000092  00000000  00000000  000018a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000028  00000000  00000000  0000193a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 56 00 	jmp	0xac	; 0xac <__vector_1>
   8:	0c 94 84 00 	jmp	0x108	; 0x108 <__vector_2>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a4 30       	cpi	r26, 0x04	; 4
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 b2 00 	call	0x164	; 0x164 <main>
  88:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <setUp>:

volatile int on = 0;
volatile int blink = 0;

void setUp(){	
	DDRB = 0xff;														//Data register B als Output (hier werden B0 und B1 verwendet)
  90:	8f ef       	ldi	r24, 0xFF	; 255
  92:	84 b9       	out	0x04, r24	; 4
	PORTB =0x00;														//PORTB 0 setzen
  94:	15 b8       	out	0x05, r1	; 5
	
	DDRD = 0x00;														//Data Register B als input (D2 und D3 verwendet)
  96:	1a b8       	out	0x0a, r1	; 10
	PORTD = (1<<PIND2)|(1<<PIND3);										//Bit für die beide Switchs setzen
  98:	8c e0       	ldi	r24, 0x0C	; 12
  9a:	8b b9       	out	0x0b, r24	; 11
	cli();																//Interrupt-Flag löschen und Interupt sperren
  9c:	f8 94       	cli
	EIMSK = (1<<INT0) | (1<<INT1);										//Enable-External-Interrupt von	INT1 und INT0 (PIND2 und PIND3)		
  9e:	83 e0       	ldi	r24, 0x03	; 3
  a0:	8d bb       	out	0x1d, r24	; 29
	EICRA = (1<<ISC11) | (1<<ISC01);									//Falling-Edge von INT0 und INT1 bilden Interrupt-Request
  a2:	8a e0       	ldi	r24, 0x0A	; 10
  a4:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <__TEXT_REGION_LENGTH__+0x7e0069>
	sei();																//Enable global Interrupt
  a8:	78 94       	sei
  aa:	08 95       	ret

000000ac <__vector_1>:
}

ISR(INT0_vect){															//Interrupt, wenn PIND2 gedrückt wird
  ac:	1f 92       	push	r1
  ae:	0f 92       	push	r0
  b0:	0f b6       	in	r0, 0x3f	; 63
  b2:	0f 92       	push	r0
  b4:	11 24       	eor	r1, r1
  b6:	8f 93       	push	r24
  b8:	9f 93       	push	r25
	if(PORTB1==on){														//PORTB 0 = LED D0
  ba:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <on>
  be:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <on+0x1>
  c2:	01 97       	sbiw	r24, 0x01	; 1
  c4:	91 f4       	brne	.+36     	; 0xea <__vector_1+0x3e>
		if(blink ==0){													//wenn LED D0 an und nicht blinkt
  c6:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
  ca:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
  ce:	89 2b       	or	r24, r25
  d0:	39 f4       	brne	.+14     	; 0xe0 <__vector_1+0x34>
			blink = 1;													//blinker einschalten
  d2:	81 e0       	ldi	r24, 0x01	; 1
  d4:	90 e0       	ldi	r25, 0x00	; 0
  d6:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
  da:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
  de:	07 c0       	rjmp	.+14     	; 0xee <__vector_1+0x42>
		}else{															//wenn blinkt
			blink = 0;													//blinker ausschalten			
  e0:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <_edata+0x1>
  e4:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
  e8:	02 c0       	rjmp	.+4      	; 0xee <__vector_1+0x42>
		}
	}else{																//wenn nicht an ist	
		PORTB=(1<<PORTB1);												//LED D0 einschalten
  ea:	82 e0       	ldi	r24, 0x02	; 2
  ec:	85 b9       	out	0x05, r24	; 5
	}
	on = PORTB1;														// on-Status zu LED D0 umsetzen
  ee:	81 e0       	ldi	r24, 0x01	; 1
  f0:	90 e0       	ldi	r25, 0x00	; 0
  f2:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <on+0x1>
  f6:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <on>
}
  fa:	9f 91       	pop	r25
  fc:	8f 91       	pop	r24
  fe:	0f 90       	pop	r0
 100:	0f be       	out	0x3f, r0	; 63
 102:	0f 90       	pop	r0
 104:	1f 90       	pop	r1
 106:	18 95       	reti

00000108 <__vector_2>:

ISR(INT1_vect){															//Interrupt, wenn PIND3 gedrückt wird
 108:	1f 92       	push	r1
 10a:	0f 92       	push	r0
 10c:	0f b6       	in	r0, 0x3f	; 63
 10e:	0f 92       	push	r0
 110:	11 24       	eor	r1, r1
 112:	8f 93       	push	r24
 114:	9f 93       	push	r25
	if(PORTB2==on){														//PORTB 1 = LED D9
 116:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <on>
 11a:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <on+0x1>
 11e:	02 97       	sbiw	r24, 0x02	; 2
 120:	91 f4       	brne	.+36     	; 0x146 <__vector_2+0x3e>
		if(blink ==0){													//wenn LED D9 an und nicht blinkt
 122:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 126:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 12a:	89 2b       	or	r24, r25
 12c:	39 f4       	brne	.+14     	; 0x13c <__vector_2+0x34>
			blink = 1;													//blinker einschalten
 12e:	81 e0       	ldi	r24, 0x01	; 1
 130:	90 e0       	ldi	r25, 0x00	; 0
 132:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
 136:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
 13a:	07 c0       	rjmp	.+14     	; 0x14a <__vector_2+0x42>
		}else{															//wenn blinkt
			blink = 0;													//blinker ausschalten
 13c:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <_edata+0x1>
 140:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
 144:	02 c0       	rjmp	.+4      	; 0x14a <__vector_2+0x42>
		}
		}else{															//wenn nicht an ist
		PORTB=(1<<PORTB2);												//LED D9 einschalten
 146:	84 e0       	ldi	r24, 0x04	; 4
 148:	85 b9       	out	0x05, r24	; 5
	}
	on = PORTB2;														// on-Status zu LED D9 umsetzen
 14a:	82 e0       	ldi	r24, 0x02	; 2
 14c:	90 e0       	ldi	r25, 0x00	; 0
 14e:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <on+0x1>
 152:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <on>
}
 156:	9f 91       	pop	r25
 158:	8f 91       	pop	r24
 15a:	0f 90       	pop	r0
 15c:	0f be       	out	0x3f, r0	; 63
 15e:	0f 90       	pop	r0
 160:	1f 90       	pop	r1
 162:	18 95       	reti

00000164 <main>:

int main(void)
{
    setUp();
 164:	0e 94 48 00 	call	0x90	; 0x90 <setUp>
    while (1)
    {
		if(blink==1) {
			PORTB ^=(1<<on);
		}else{
			PORTB = (1<<on);
 168:	21 e0       	ldi	r18, 0x01	; 1
 16a:	30 e0       	ldi	r19, 0x00	; 0
int main(void)
{
    setUp();
    while (1)
    {
		if(blink==1) {
 16c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 170:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 174:	01 97       	sbiw	r24, 0x01	; 1
 176:	79 f4       	brne	.+30     	; 0x196 <main+0x32>
			PORTB ^=(1<<on);
 178:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <on>
 17c:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <on+0x1>
 180:	45 b1       	in	r20, 0x05	; 5
 182:	b9 01       	movw	r22, r18
 184:	02 c0       	rjmp	.+4      	; 0x18a <main+0x26>
 186:	66 0f       	add	r22, r22
 188:	77 1f       	adc	r23, r23
 18a:	8a 95       	dec	r24
 18c:	e2 f7       	brpl	.-8      	; 0x186 <main+0x22>
 18e:	cb 01       	movw	r24, r22
 190:	84 27       	eor	r24, r20
 192:	85 b9       	out	0x05, r24	; 5
 194:	0b c0       	rjmp	.+22     	; 0x1ac <main+0x48>
		}else{
			PORTB = (1<<on);
 196:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <on>
 19a:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <on+0x1>
 19e:	a9 01       	movw	r20, r18
 1a0:	02 c0       	rjmp	.+4      	; 0x1a6 <main+0x42>
 1a2:	44 0f       	add	r20, r20
 1a4:	55 1f       	adc	r21, r21
 1a6:	8a 95       	dec	r24
 1a8:	e2 f7       	brpl	.-8      	; 0x1a2 <main+0x3e>
 1aa:	45 b9       	out	0x05, r20	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1ac:	5f ef       	ldi	r21, 0xFF	; 255
 1ae:	63 ec       	ldi	r22, 0xC3	; 195
 1b0:	79 e0       	ldi	r23, 0x09	; 9
 1b2:	51 50       	subi	r21, 0x01	; 1
 1b4:	60 40       	sbci	r22, 0x00	; 0
 1b6:	70 40       	sbci	r23, 0x00	; 0
 1b8:	e1 f7       	brne	.-8      	; 0x1b2 <main+0x4e>
 1ba:	00 c0       	rjmp	.+0      	; 0x1bc <main+0x58>
 1bc:	00 00       	nop
 1be:	d6 cf       	rjmp	.-84     	; 0x16c <main+0x8>

000001c0 <_exit>:
 1c0:	f8 94       	cli

000001c2 <__stop_program>:
 1c2:	ff cf       	rjmp	.-2      	; 0x1c2 <__stop_program>
